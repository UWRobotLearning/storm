# used to create the object
name: FrankaReacher

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  num_envs: ${resolve_default:1,${...num_envs}}
  envSpacing: 1.5
  episodeLength: 500
  enableDebugVis: False
  controlSpace: "vel"
  num_objects: 0
  
  # targetRandomizeMode: "fixed_target"

  # numObservations: 20
  # numActions: 7
  # numStates: 21
  # clipObservations: 5.0
  # # clipActions: 1.0

  # startPositionNoise: 0.0
  # startRotationNoise: 0.0

  # numProps: 16
  aggregateMode: 3

  actionScale: 1.0 #7.5
  dofVelocityScale: 0.1

  asset:
    assetRoot: "../../content/assets"
    assetFileNameFranka: "urdf/franka_description/franka_panda_pusher.urdf"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False


rollout:
  num_instances: ${task.env.num_envs}
  batch_size: 1
  horizon: 1
  control_dt: 0.02
  control_space: 'acc'
  n_dofs: 7
  state_filter_coeff: {'position':0.1, 'velocity':0.0, 'acceleration':0.0}
  # run_open_loop: False #check
  # control_space: 'acc'
  # float_dtype: 'float32' #check
  # n_dofs: 7

  model:
    # any link that is not specified as learnable will be initialized from urdf
    urdf_path: "urdf/franka_description/franka_panda_pusher.urdf"
    learnable_rigid_body_config:
      learnable_links: []
    name: "franka_panda"
    max_acc: 100.0 
    # dt: 0.02 #check
    dt_traj_params:
      base_dt:  0.02 #0.0166 #0.01 #0.02
      base_ratio: 0.5
      max_dt: 0.2
    ee_link_name: "ee_link"
    init_state: [0.8, 0.3, 0.0, -1.57, 0.0, 1.86, 0.] #check
    link_names: ['panda_link1', 'panda_link2','panda_link3','panda_link4','panda_link5', 'panda_link6','panda_hand']
    # vel_scale: 1.0
    collision_spheres: '../robot/franka.yml'
    
    robot_collision_params:
      urdf_path: ${task.rollout.model.urdf_path}
      sample_points: 100
      link_names: ${task.rollout.model.link_names}
      threshold: 0.35
      bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
      collision_spheres: 'robot/franka.yml'
      self_collision_weights: 'robot_self/franka_panda_self_collision_weights.pt'
      n_dofs: ${task.rollout.n_dofs} #check

    world_collision_params:
      model_path: 'scene_coll_nn/' #check
      label_map: {'robot':2, 'ground':0} #check
      bounds: [[-1.0, -1.0, -0.2],[1.0,1.0,1.0]] #check
      #bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
      grid_resolution: 0.05 #check

  cost:
    # goal_pose:
    #   # vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    #   weight: [50.0, 100.0] #[15.0, 100.0]
    #   # position_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
    #   # orientation_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
    #   hinge_val: -1
    #   convergence_val: [0.0, 0.0] # orientation, position

    goal_pose:
      vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
      # weight: [15.0, 100.0] #[15.0, 100.0]
      weight: [1.0, 10.0] #[15.0, 100.0]
      position_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
      orientation_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
      hinge_val: -1
      convergence_val: [0.0, 0.0] # orientation, position

    zero_vel:
      weight: 0.0
      hinge_val: 0.2 #0.2
      gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':1.0}

    zero_acc:
      weight: 0.0 #0.01
      hinge_val: -1.0
      gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':5.0}

    collision:
      weight: 0.0
      gaussian_params: {'n':0, 'c':0.5, 's':0, 'r':5.0}
      
    primitive_collision:
      weight: 5000.0
      distance_threshold: 0.05
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}

    robot_self_collision:
      weight: 5000.0 #5000.0
      distance_threshold: 0.05
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}

    null_space:
      weight: 0.0 #0.01 #0.05 #0.5 #1.0
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}
      vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5]
      
    manipulability:
      weight: 10.0 #10.0 #100.0 #0.05 #0.5 #1.0
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
      thresh: 0.03

    joint_l2:
      weight: 0.0
      gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':5.0}

    ee_vel:
      weight: 0.0
      vec_weight: [1.0, 1.0, 1.0] #, 0.0, 0.0, 0.0]
      gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':5.0}

    stop_cost:
      weight: 10.0 #100.0 #100.0 #100.0 #100.0
      max_nlimit: 2.0 #1.5 #0.2
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}

    stop_cost_acc:
      weight: 0.0
      max_limit: 0.1 #0.2
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}

    # voxel_collision:
    #   weight: 0.0 #5000.0
    #   gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':100.0}
    #   distance_threshold: 0.05
    #   grid_resolution: 0.05

    # smooth: # on robot acceleration
    #   weight: 0.0 
    #   gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':10.0}
    #   order: 1

    state_bound:
      weight: 5000.0 
      gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
      bound_thresh: 0.05

    retract_state : [0.00, 0.0, 0.00, -1.5, 0.00, 2.0, 0.0] #check
    retract_weight: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0] #check

mpc:
  rollout: ${task.rollout}
  world: ${task.world}
  state_filter_coeff: {'position':0.1, 'velocity':0.0, 'acceleration':0.0}
    
  mppi:
    num_instances     : ${task.env.num_envs}
    horizon           : 30
    init_cov          : 1.0 #0.005 #.5 #.5
    gamma             : 0.99 #0.98
    n_iters           : 1
    step_size_mean    : 0.98
    step_size_cov     : 0.7
    beta              : 0.1 #1.0
    alpha             : 1
    num_particles     : 1000 #10000
    update_cov        : False
    cov_type          : 'diag_AxA' # 
    kappa             : 0.005
    null_act_frac     : 0.01
    sample_mode       : 'mean'
    base_action       : 'repeat'
    squash_fn         : 'clamp'
    hotstart          : True
    visual_traj       : 'ee_pos_seq'
    sample_params:
      type: 'halton'
      fixed_samples: True
      sample_ratio: {'halton':0.0, 'halton-knot':1.0, 'random':0.0, 'random-knot':0.0}
      seed: 0
      filter_coeffs: null #[0.3, 0.3, 0.4]
      knot_scale: 4
      bspline_degree: 3

train:
  agent:
    name: 'MPC'
    num_episodes: 2
    save_buffer: false
    log_freq: 50
    eval_freq: 100

    checkpoint_freq: 10000

sim:
  dt: 0.0166 # 1/60
  substeps: 1
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 12
    num_velocity_iterations: 1
    contact_offset: 0.005
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  randomize: False

defaults:
  - world: FrankaReacherWorld
