# used to create the object
name: FrankaReacherRealRobot
physics_engine: ${..physics_engine}
robot_urdf: "urdf/franka_description/franka_panda_no_gripper.urdf"
ee_link_name: "ee_link"
n_dofs: 7

# if given, will override the device setting in gym. 
env:
  num_envs: 1
  episodeLength: 300
  num_objects: 0
  robot_default_dof_pos: [0.0, -0.7853, 0.0, -2.3561, 0.0, 1.5707, 0.7853]
  asset:
    assetFileNameRobot: ${task.robot_urdf}
  #The following are used only when running in sim
  envSpacing: 1.5
  enableDebugVis: False
  controlFrequencyInv: 1
  # clipObservations: 5.0
  # # clipActions: 1.0
  aggregateMode: 3
  # actionScale: 1.0 #7.5
  # dofVelocityScale: 0.1
  joint_control_mode: 'inverse_dynamics'
  robot_p_gains: [100.0, 100.0, 100.0, 100.0, 40.0, 30.0, 20.0]
  robot_d_gains: [10.0, 10.0, 10.0, 10.0, 7.5, 5.0, 1.0]
  robot_z_offset: 0.0


joint_control:
  n_dofs: ${task.n_dofs}
  control_dt: 0.02
  state_filter_coeff: {'q_pos': 0.1, 'q_vel': 0.1, 'q_acc': 0.0}

task:
  randomize: False  
  robot_urdf: ${task.robot_urdf}
  #links to be used for collision checking
  robot_link_names: ['panda_link1', 'panda_link2','panda_link3','panda_link4','panda_link5', 'panda_link6', 'panda_link7', 'panda_hand']
  ee_link_name: ${task.ee_link_name}
  control_space: 'acc'
  max_acc: 15.0
  max_jerk: 500.0

  robot_collision_params:
    urdf_path: ${task.robot_urdf}
    sample_points: 100
    link_names: ${task.task.robot_link_names}
    threshold: 0.35
    collision_spheres: 'robot/franka_real_robot.yml'
    self_collision_weights: 'robot_self/franka_panda_self_collision_weights_2.pt'
    self_collision_ignore:
      panda_link0: ["panda_link1", "panda_link2"]
      panda_link1: ["panda_link2", "panda_link3", "panda_link4"]
      panda_link2: ["panda_link3", "panda_link4"]
      panda_link3: ["panda_link4", "panda_link6"]
      panda_link4: ["panda_link5", "panda_link6", "panda_link7"] #"panda_link8"
      panda_link5: ["panda_link6", "panda_link7"] # "panda_leftfinger", "panda_rightfinger"],
      panda_link6: ["panda_link7", "panda_hand"]  #, "attached_object", "panda_leftfinger", "panda_rightfinger"],
      panda_link7: ["panda_hand"]  # "attached_object", "panda_leftfinger", "panda_rightfinger"],
      panda_hand: []              
      #["panda_leftfinger", "panda_rightfinger","attached_object"],
      # panda_leftfinger: ["panda_rightfinger", "attached_object"],
      # panda_rightfinger: ["attached_object"],
    n_dofs: ${task.rollout.n_dofs}

  world_collision_params:
    bounds: [[-0.4, -0.6, -0.2], [0.6,0.6,1.0]] 
    #bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
    grid_resolution: 0.05

  task_specs:
    default_ee_target: [0.6, 0.0, 0.15, 0.0, 0.707, 0.707, 0.0]
    # default_ee_target: [0.6, 0.0, 0.5, 0.0, 0.707, 0.707, 0.0]
    # default_ee_target: [0.4, -0.3, 0.5, 0.0, 0.707, 0.707, 0.0]
    target_position_noise: [0.2, 0.2, 0.0] #xyz (meters)
    target_rotation_noise: [0.0, 0.0, 0.0] #radians

  cost:
    goal_pose:
      vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
      weight: [5.0, 20.0] #[10.0, 50.0] #[50.0, 100.0]
      cost_type: 'se3_twist'
      norm_type: 'l2'
      hinge_val: -1
      convergence_val: [0.0, 0.0] # orientation, position

    ee_vel_twist:
      weight: 8e-3
      norm_type: 'l2'
      # hinge_val: 0.01
      # vec_weight: [1.0, 1.0, 1.0] 

    ee_acc_twist:
      weight: 0.0 #1e-4
      norm_type: 'l2'
      # vec_weight: [1.0, 1.0, 1.0] 

    zero_q_vel:
      weight: 1e-2
      norm_type: 'l2'
      # hinge_val: 0.2 #0.2

    zero_q_acc:
      weight: 0.0 #1e-4 #0.01
      norm_type: 'l2'
      # hinge_val: -1.0

    zero_q_jerk:
      weight: 0.0 #0.01
      norm_type: 'l2'
      # hinge_val: -1.0
      
    manipulability:
      weight: 0.5 #30.0 #30.0 #10.0 #100.0 #0.05 #0.5 #1.0
      thresh: 0.1 #0.1 #0.05 #0.03

    joint_l2:
      weight: 0.0
      norm_type: 'l1'

    smooth_cost:
      weight: 0.0
      order: 1

    primitive_collision:
      weight: 100.0 #5000.0
      distance_threshold_world: 0.03
      distance_threshold_self: 0.03
      

    # robot_self_collision:
    #   weight: 5000.0 #5000.0
    #   distance_threshold: 0.05

    state_bound:
      weight: 100.0 #5000.0 
      bound_thresh: 0.03

    retract_state : [0.00, 0.0, 0.00, -1.5, 0.00, 2.0, 0.0] #check
    retract_weight: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0] #check

defaults:
  - world: FrankaReacherWorldReal


#Used only when running in sim
sim:
  dt: 0.0166 # 1/60
  substeps: 1
  up_axis: "z"
  use_gpu_pipeline: ${...use_gpu_pipeline}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 12
    num_velocity_iterations: 1
    contact_offset: 0.005
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)


# rollout:
#   num_instances: 1
#   batch_size: 1
#   horizon: 1
#   control_dt: 0.02
#   control_space: 'acc'
#   n_dofs: 7
#   state_filter_coeff: {'q_pos': 0.1, 'q_vel': 0.0, 'q_acc': 0.0}

#   model:
#     # any link that is not specified as learnable will be initialized from urdf
#     urdf_path: "urdf/franka_description/franka_panda_no_gripper.urdf"
#     learnable_rigid_body_config:
#       learnable_links: []
#     name: "franka_panda_real"
#     max_acc: 10.0 
#     dt_traj_params:
#       base_dt:  0.02
#       base_ratio: 1.0 #0.5
#       max_dt: 0.2
#     ee_link_name: "ee_link"
#     init_state: [0.8, 0.3, 0.0, -1.57, 0.0, 1.86, 0.] #check
#     link_names: ['panda_link1', 'panda_link2','panda_link3','panda_link4','panda_link5', 'panda_link6','panda_hand']
#     collision_spheres: '../robot/franka_real_robot.yml'
    
#     robot_collision_params:
#       urdf_path: ${task.rollout.model.urdf_path}
#       sample_points: 100
#       link_names: ${task.rollout.model.link_names}
#       threshold: 0.35
#       bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
#       collision_spheres: 'robot/franka_real_robot.yml'
#       self_collision_weights: 'robot_self/franka_panda_real_self_collision_weights_2.pt'
#       n_dofs: ${task.rollout.n_dofs} #check

#     world_collision_params:
#       # bounds: [[-1.0, -1.0, -0.2],[1.0,1.0,1.0]] #check
#       bounds: [[-0.4, -0.6, -0.2], [0.6,0.6,1.0]]
#       grid_resolution: 0.05 #check

#   task_specs:
#     default_ee_target: [0.3, 0.0, 0.3, 0.0, 0.707, 0.707, 0.0]
#     target_position_noise: 0.2
#     target_rotation_noise: 0.0

#   cost:
#     goal_pose:
#       vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
#       weight: [5.0, 10.0] #[10.0, 50.0] #[50.0, 100.0]
#       cost_type: 'se3_twist'
#       norm_type: 'l1'
#       hinge_val: -1
#       convergence_val: [0.0, 0.0] # orientation, position

#     ee_vel_twist:
#       weight: 0.5 #1.0
#       norm_type: 'l1'
#       # hinge_val: 0.01
#       # vec_weight: [1.0, 1.0, 1.0] 

#     ee_acc_twist:
#       weight: 0.0
#       norm_type: 'l1'
#       # vec_weight: [1.0, 1.0, 1.0] 

#     zero_q_vel:
#       weight: 0.5 #1.0
#       norm_type: 'l1'
#       # hinge_val: 0.2 #0.2

#     zero_q_acc:
#       weight: 0.5 #0.0 #0.01
#       norm_type: 'l1'
#       # hinge_val: -1.0

#     null_space:
#       weight: 0.0 #0.01 #0.05 #0.5 #1.0
#       vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5]
      
#     manipulability:
#       weight: 10.0 #30.0 #10.0 #100.0 #0.05 #0.5 #1.0
#       thresh: 0.05 #0.03

#     joint_l2:
#       weight: 0.0
#       norm_type: 'l1'

#     stop_cost:
#       weight: 50.0
#       max_nlimit: 2.0 #0.2

#     stop_cost_acc:
#       weight: 0.0
#       max_limit: 0.1 #0.2

#     smooth_cost:
#       weight: 0.0 
#       order: 1

#     primitive_collision:
#       weight: 5000.0
#       distance_threshold: 0.03
#       # gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}

#     # robot_self_collision:
#     #   weight: 5000.0
#     #   distance_threshold: 0.05

#     state_bound:
#       weight: 5000.0 
#       bound_thresh: 0.05

#     retract_state : [0.00, 0.0, 0.00, -1.5, 0.00, 2.0, 0.0] #check
#     retract_weight: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0] #check

# mpc:
#   rollout: ${task.rollout}
#   world: ${task.world}
#   viz_rollouts: False

#   mppi:
#     num_instances     : 1
#     horizon           : 30
#     init_cov          : 0.02 #0.005
#     gamma             : 0.99
#     td_lam            : 0.97
#     n_iters           : 1
#     step_size_mean    : 0.98
#     step_size_cov     : 0.01
#     beta              : 0.1 #1.0
#     alpha             : 1
#     num_particles     : 500 #1000 #10000
#     update_cov        : False
#     cov_type          : 'diag_AxA' # 
#     kappa             : 0.005
#     null_act_frac     : 0.01
#     sample_mode       : 'mean'
#     base_action       : 'repeat'
#     squash_fn         : 'clamp'
#     hotstart          : True
#     visual_traj       : 'ee_pos_seq'
#     sample_params:
#       type: 'multiple'
#       fixed_samples: True
#       sample_ratio: {'halton': 0.0, 'halton-knot': 1.0, 'random': 0.0, 'random-knot': 0.0}
#       seed: 0
#       filter_coeffs: null #[0.3, 0.3, 0.4]
#       knot_scale: 4
#       bspline_degree: 3

# train:
#   agent:
#     name: 'MPC'
#     num_episodes: 2
#     save_buffer: false
#     log_freq: 50
#     eval_freq: 100
#     checkpoint_freq: 10000

#   policy: 0.0


# sim:

# task:
#   randomize: False

# defaults:
#   - world: FrankaReacherWorldReal


# # used to create the object
# name: FrankaReacherRealRobot

# env:
#   control_space: 'joint_impedance'
#   numEnvs: 1
#   episodeLength: 500

# rollout:

#   control_dt: 0.02 #0.0166 #0.02
#   run_open_loop: False #check
#   control_space: 'acc'
#   env_control_space: ${resolve_default:'pos',${task.env.numEnvs}} #remove the need, just return entire command?
#   float_dtype: 'float32' #check
#   state_filter_coeff: {'position':0.1, 'velocity':0.0, 'acceleration':0.0}
#   # cmd_filter_coeff: {'position':1.0, 'velocity':1.0, 'acceleration':0.0}
#   n_dofs: 7

#   model:
#     # any link that is not specified as learnable will be initialized from urdf
#     urdf_path: "urdf/franka_description/franka_panda_no_gripper.urdf"
#     learnable_rigid_body_config:
#       learnable_links: []
#     name: "franka_panda_real"
#     max_acc: 5.0 
#     dt: 0.02
#     dt_traj_params:
#       base_dt:  0.02 #0.0166 #0.01 #0.02
#       base_ratio: 0.5
#       max_dt: 0.2
#     ee_link_name: "ee_link"
#     init_state: [0.8, 0.3, 0.0, -1.57, 0.0, 1.86, 0.]
#     link_names: ['panda_link2','panda_link3','panda_link4','panda_link5', 'panda_link6', 'panda_hand']
#     vel_scale: 1.0
#     collision_spheres: '../robot/franka_real_robot.yml'
    
#     robot_collision_params:
#       urdf_path: ${task.rollout.model.urdf_path}
#       sample_points: 100
#       link_names: ['panda_link2','panda_link3','panda_link4','panda_link5', 'panda_link6', 'panda_hand']
#       threshold: 0.35
#       bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
#       collision_spheres: 'robot/franka_real_robot.yml'
#       self_collision_weights: 'robot_self/franka_panda_real_self_collision_weights.pt'
#       n_dofs: ${task.rollout.n_dofs} #check

#     world_collision_params:
#       model_path: 'scene_coll_nn/'
#       label_map: {'robot':2, 'ground':0}
#       bounds: [[-1.0, -1.0, -0.2],[1.0,1.0,1.0]]
#       #bounds: [[-0.5, -0.8, 0.0],[0.5,0.8,1.0]]
#       grid_resolution: 0.05


#   cost:
#     # goal_pose:
#     #   # vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
#     #   weight: [50.0, 100.0] #[15.0, 100.0]
#     #   # position_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
#     #   # orientation_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
#     #   hinge_val: -1
#     #      name: 'MPC'
#  convergence_val: [0.0, 0.0] # orientation, position

#     goal_pose:
#       vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
#       weight: [10.0, 100.0] #[15.0, 100.0]
#       position_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
#       orientation_gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0}
#       hinge_val: -1
#       convergence_val: [0.0, 0.0] # orientation, position

#     zero_vel:
#       weight: 0.0
#       hinge_val: 0.2 #0.2
#       gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':1.0}

#     zero_acc:
#       weight: 0.0 #0.01
#       hinge_val: -1.0
#       gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':5.0}

#     collision:
#       weight: 0.0
#       gaussian_params: {'n':0, 'c':0.5, 's':0, 'r':5.0}
      
#     primitive_collision:
#       weight: 5000.0
#       distance_threshold: 0.03 #0.05
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}

#     robot_self_collision:
#       weight: 5000.0 #5000.0
#       distance_threshold: 0.05
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}

#     null_space:
#       weight: 0.0 #0.01 #0.05 #0.5 #1.0
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}
#       vec_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5]
      
#     manipulability:
#       weight: 10.0 #10.0 #100.0 #0.05 #0.5 #1.0
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
#       thresh: 0.03

#     joint_l2:
#       weight: 0.0
#       gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':5.0}

#     ee_vel:
#       weight: 0.0
#       vec_weight: [1.0, 1.0, 1.0] #, 0.0, 0.0, 0.0]
#       gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':5.0}

#     stop_cost:
#       weight: 100.0 #100.0 #100.0 #100.0
#       max_nlimit: 1.5 #0.2
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}

#     stop_cost_acc:
#       weight: 0.0
#       max_limit: 0.1 #0.2
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':1.0}

#     voxel_collision:
#       weight: 0.0 #5000.0
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':100.0}
#       distance_threshold: 0.05
#       grid_resolution: 0.05

#     smooth: # on robot acceleration
#       weight: 0.0 
#       gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':10.0}
#       order: 1

#     state_bound:
#       weight: 1000.0 
#       gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
#       bound_thresh: 0.05

#     retract_state : [0.00, 0.0, 0.00, -1.5, 0.00, 2.0, 0.0]
#     retract_weight: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0]



# defaults:
#   - world: FrankaReacherWorldReal
