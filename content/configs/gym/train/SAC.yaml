
dataset_path: 'MPC/data/agent_buffer_0.pt'

policy:
  mlp_params:
    hidden_layers: [256, 256] 
    activation: torch.nn.ReLU 
    output_activation: null
    dropout_prob: 0.0 
    layer_norm: false
  init_std: 1.0
  min_std: 0.00001
  max_std: 10.0
  std_type: 'heteroscedastic'
  learn_logvar_bounds: false
  use_tanh: false
  world: ${task.world}
  rollout: ${task.rollout}

critic:
  mlp_params:
    hidden_layers: [256, 256] 
    activation: torch.nn.ReLU 
    output_activation: null
    dropout_prob: 0.0 
    layer_norm: false
  ensemble_size: 10
  prediction_size: 2

agent:
  name: 'SAC'
  save_buffer: false
  num_epochs: 1e6
  num_train_episodes_per_epoch: 1
  num_updates_per_epoch: 10
  update_to_data_ratio: 5
  policy_update_delay: 5
  discount: 0.99
  train_batch_size: 256
  max_buffer_size: 1e6
  min_buffer_size: 0 #1e3
  num_action_samples: 1
  log_freq: 1
  checkpoint_freq: 500
  eval_freq: 1000
  eval_first_policy: false
  num_eval_episodes: 1
  fixed_alpha: 0.2
  init_log_alpha: 0.0
  automatic_entropy_tuning: true
  random_ensemble_q: false
  reward_scale: 1.0
  policy_optimizer:
    __target__: torch.optim.Adam
    lr: 3e-4
  critic_optimizer:
    __target__: torch.optim.Adam
    lr: 3e-4
  alpha_optimizer:
    __target__: torch.optim.Adam
    lr: 3e-4
  polyak_tau: 5e-3
  target_update_interval: 1
  backup_entropy: true
  relabel_data: true

  #Pretraining related
  num_pretrain_steps: 500
  policy_use_tanh: ${train.policy.use_tanh}
  policy_loss_type: nll
